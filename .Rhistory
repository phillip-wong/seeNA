makeNA = function(data,  n_missing = 10, value_NA = NA){
holder = list()
flag = 0
i = 1
while (i <= length(1:n_missing)){
column_index = sample(1:length(data), 1)
row_index = sample(1:nrow(data), 1)
hold = append(column_index,row_index)
for (j in holder){
if (all(hold == j)){
flag = 1
break
}
}
if (flag == 0) {
data[[column_index]][row_index] = value_NA
holder = append(holder, list(hold))
i = i + 1
}
else {flag = 0}
}
return(data)
}
library(usethis)
?use_mit_license
use_mit_license()
use_mit_license("Phillip Wong")
seeNA = function(data, color = 'magenta'){
data[is.na(data) == FALSE] = 1L
data[is.na(data)] = 0L
result_vec = c()
for (i in 1:length(data)){
total = length(data[[i]])
sum = sum(data[[i]])
result = (total - sum)/total
result_vec[i] = result
}
result_df = as.data.frame(result_vec)
row.names(result_df) = colnames(data)
ggplot(result_df, aes(x = row.names(result_df), y = result_vec)) +
geom_point(color = color, size = 3) +
geom_text(aes(label = paste(round(result_vec * 100, 2),"%")), check_overlap = F) +
ggtitle('NA Proportion per Variable Index') +
scale_y_continuous(name = "Proportion of NA Values", limits = c(0,1)) +
xlab('Variable Name(s)') +
theme_economist() +
scale_color_economist()
}
use_vignette("seeNA")
library(ggplot2)
library(ggthemes)
library(seeNA)
rm(makeNA)
rm(seeNA)
x = makeNA(mtcars, 100)
sum(is.na(x))
seeNA(x)
library(seeNA)
seeNA(x)
rm(x)
library(pkgdown)
build_site()
build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
#'
#' @param data an object of class data.frame to apply missing values.
#' @param n_missing an object of class int specifying NA values in the returned data frame. Default is 10.
#' @param value_NA value to specified in the data frame. Default parameter is NA.
#'
#' @export
#' @return data.frame object
#' @examples
#' data(mtcars)
#' makeNA(mtcars)
makeNA = function(data,  n_missing = 10, value_NA = NA){
holder = list()
flag = 0
i = 1
while (i <= length(1:n_missing)){
column_index = sample(1:length(data), 1)
row_index = sample(1:nrow(data), 1)
hold = append(column_index,row_index)
for (j in holder){
if (all(hold == j)){
flag = 1
break
}
}
if (flag == 0) {
data[[column_index]][row_index] = value_NA
holder = append(holder, list(hold))
i = i + 1
}
else {flag = 0}
}
return(data)
}
x = makeNA(mtcars, 100)
View(x)
library(devtools)
?use_data
use_data(x)
emptyCars = makeNA(mtcars, 100)
use_data(emptyCars)
emptyCars
library(seeNA)
data("emptyCars")
force(emptyCars)
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
library(seeNA)
library(seeNA)
library(devtolls)
library(devtools)
build_site()
use_vignette("Imputations")
library(seeNA)
build_site()
library(seeNA)
build_site()
library(seeNA)
build_site()
library(seeNA)
library(seeNA)
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
library(seeNA)
library(seeNA)
build_site()
#'
#' @param data an object of class data.frame to apply missing values.
#' @param n_missing an object of class int specifying NA values in the returned data frame. Default is 10.
#' @param value_NA value to specified in the data frame. Default parameter is NA.
#'
#' @export
#' @return data.frame object
#' @examples
#' # data(mtcars)
#' # makeNA(mtcars)
makeNA = function(data,  n_missing = 10, value_NA = NA){
holder = list()
flag = 0
i = 1
while (i <= length(1:n_missing)){
column_index = sample(1:length(data), 1)
row_index = sample(1:nrow(data), 1)
hold = append(column_index,row_index)
for (j in holder){
if (all(hold == j)){
flag = 1
break
}
}
if (flag == 0) {
data[[column_index]][row_index] = value_NA
holder = append(holder, list(hold))
i = i + 1
}
else {flag = 0}
}
return(data)
}
View(makeNA)
x = data(mtcars)
x = data(mtcars)
x
data(mtcars)
mtcars
clear
randomCars = makeNA(mtcars, n_missing = 50, value_NA = 99)
randomCars = makeNA(mtcars, n_missing = 50, value_NA = 98)
randomCars = makeNA(mtcars, n_missing = 50, value_NA = 97)
View(randomCars)
randomCars = makeNA(mtcars, n_missing = 50, value_NA = 99)
View(randomCars)
randomCars = makeNA(mtcars, n_missing = 50, value_NA = 98)
randomCars = makeNA(mtcars, n_missing = 50, value_NA = 97)
View(randomCars)
randomCars = makeNA(mtcars, n_missing = 50, value_NA = 98)
View(randomCars)
randomCars = makeNA(mtcars, n_missing = 100, value_NA = 99)
randomCars = makeNA(mtcars, n_missing = 100, value_NA = 99)
View(randomCars)
use_data(randomCars)
library(seeNA)
build_site()
library(seeNA)
build_site()
library(seeNA)
build_site()
library(seeNA)
build_site()
library(seeNA)
build_site()
library(seeNA)
build_site()
summaryNA = function (df, round=0)
{
if (!(is.data.frame(df))) {
stop("You need to input a data frame")
}
dfname <- deparse(substitute(df))
cat("\nThe data frame", dfname, "has",(nrow(df)*ncol(df)) , "total values")
cat("\nMissing Values:",sum(is.na(df)))
cat("\nPercentage of Missing Values:", paste0(round((sum(is.na(df))/(nrow(df)*ncol(df)))*100,round),  "%"))
colNA <- function(df) {
varnames <- colnames(df)
tbl <- matrix(nrow = length(varnames), ncol = 3, byrow = TRUE)
colnames(tbl) <- c("variable","n_missing", "pct_missing")
rownames(tbl) <- varnames
tbl[, 1] <- varnames
for (i in 1:length(varnames)) {
tbl[i, 2] <- sum(is.na(df[, i]))
}
n <- nrow(df)
for (i in 1:length(varnames)) {
tbl[i, 3] <- paste0(round(sum(is.na(df[, i])) * 100/n,round), "%")
}
cat("\n\n=================\n","Total Columns:", sum(colSums(is.na(x))!=0), sep = "")
cat("\nMissing Columns:", sum(colSums(is.na(df))!=0), sep = "")
cat("\nPercentage of Missing Columns:", paste0(round((sum(colSums(is.na(df))!=0)/ncol(df))*100,round),"%","\n\n"), sep = "")
prmatrix(tbl, quote = FALSE, rowlab = rep("", nrow(tbl)),
right = TRUE)
}
rowNA <- function(df) {
total_rows = nrow(df)
total_columns = ncol(df)
n_missing_row = rowSums(is.na(df))
list=replicate(12, 0)
tbl <- matrix(nrow = 12, ncol = 3, byrow = TRUE)
colnames(tbl) <- c("pct_missing", "n_rows", "pct_rows")
tbl[, 1] <- c("= 0", "> 0%", "> 10%", "> 20%", "> 30%", "> 40%", "> 50%", "> 60%", "> 70%", "> 80%", "> 90%", "= 100%")
for (missing in n_missing_row){
if((missing/total_columns==0)){
list[1]=list[1]+1
}
if((missing/total_columns>0 & missing/total_columns<=0.1)){
list[2]=list[1]+1
}
if((missing/total_columns>0.1 & missing/total_columns<=0.2)){
list[3]=list[1]+1
}
if((missing/total_columns>0.2 & missing/total_columns<=0.3)){
list[4]=list[1]+1
}
if((missing/total_columns>0.3 & missing/total_columns<=0.4)){
list[5]=list[1]+1
}
if((missing/total_columns>0.4 & missing/total_columns<=0.5)){
list[6]=list[1]+1
}
if((missing/total_columns>0.5 & missing/total_columns<=0.6)){
list[7]=list[1]+1
}
if((missing/total_columns>0.6 & missing/total_columns<=0.7)){
list[8]=list[1]+1
}
if((missing/total_columns>0.7 & missing/total_columns<=0.8)){
list[9]=list[1]+1
}
if((missing/total_columns>0.8 & missing/total_columns<=0.9)){
list[10]=list[1]+1
}
if((missing/total_columns>0.9 & missing/total_columns<1)){
list[11]=list[1]+1
}
if((missing/total_columns==1)){
list[12]=list[1]+1
}
}
for (i in 1:length(list)) {
tbl[i, 2] <- list[i]
}
for (i in 1:length(list)) {
tbl[i, 3] <- paste0(round(list[i]/total_rows * 100,round), "%")
}
cat("\n=================\n","Total Rows:", nrow(df), sep = "")
cat("\nMissing Rows:", sum(rowSums(is.na(df))!=0), sep = "")
cat("\nPercentage of Missing Rows:", paste0(round((sum(rowSums(is.na(df))!=0)/nrow(df))*100,round),"%"),"\n\n",sep = "")
prmatrix(tbl, quote = FALSE, rowlab = rep("", nrow(tbl)),
right = TRUE)
}
colNA(df)
rowNA(df)
}
fixNA = function(data=mtcars, value_NA = c(99,NA), recode_NA=NA){
x=1
for (i in 1:ncol(data)){
y=1
if (TRUE %in% (value_NA %in% data[[x]])){
for(i in 1:nrow(data)){
if(TRUE %in% (data[[x]][y] %in% value_NA)){
data[[x]][y]=recode_NA
}
y=y+1
}
}
x=x+1
}
return(data)
}
library(seeNA)
data("data/emptyCars.rda")
data("emptyCars")
summaryNA(emptyCars)
class(emptyCars)
#' @param df an object of class data.frame.
#' @param round rounding for summary statistics
#'
#' @export
#' @return
#'
#' @examples
#' # library(seeNA)
#' # data("emptyCars")
#' # summaryNA(emptyCars)
summaryNA = function (df, round=0)
{
if (!(is.data.frame(df))) {
stop("You need to input a data frame")
}
dfname <- deparse(substitute(df))
cat("\nThe data frame", dfname, "has",(nrow(df)*ncol(df)) , "total values")
cat("\nMissing Values:",sum(is.na(df)))
cat("\nPercentage of Missing Values:", paste0(round((sum(is.na(df))/(nrow(df)*ncol(df)))*100,round),  "%"))
colNA <- function(df) {
varnames <- colnames(df)
tbl <- matrix(nrow = length(varnames), ncol = 3, byrow = TRUE)
colnames(tbl) <- c("variable","n_missing", "pct_missing")
rownames(tbl) <- varnames
tbl[, 1] <- varnames
for (i in 1:length(varnames)) {
tbl[i, 2] <- sum(is.na(df[, i]))
}
n <- nrow(df)
for (i in 1:length(varnames)) {
tbl[i, 3] <- paste0(round(sum(is.na(df[, i])) * 100/n,round), "%")
}
cat("\n\n=================\n","Total Columns:", sum(colSums(is.na(df))!=0), sep = "")
cat("\nMissing Columns:", sum(colSums(is.na(df))!=0), sep = "")
cat("\nPercentage of Missing Columns:", paste0(round((sum(colSums(is.na(df))!=0)/ncol(df))*100,round),"%","\n\n"), sep = "")
prmatrix(tbl, quote = FALSE, rowlab = rep("", nrow(tbl)),
right = TRUE)
}
rowNA <- function(df) {
total_rows = nrow(df)
total_columns = ncol(df)
n_missing_row = rowSums(is.na(df))
list=replicate(12, 0)
tbl <- matrix(nrow = 12, ncol = 3, byrow = TRUE)
colnames(tbl) <- c("pct_missing", "n_rows", "pct_rows")
tbl[, 1] <- c("= 0", "> 0%", "> 10%", "> 20%", "> 30%", "> 40%", "> 50%", "> 60%", "> 70%", "> 80%", "> 90%", "= 100%")
for (missing in n_missing_row){
if((missing/total_columns==0)){
list[1]=list[1]+1
}
if((missing/total_columns>0 & missing/total_columns<=0.1)){
list[2]=list[1]+1
}
if((missing/total_columns>0.1 & missing/total_columns<=0.2)){
list[3]=list[1]+1
}
if((missing/total_columns>0.2 & missing/total_columns<=0.3)){
list[4]=list[1]+1
}
if((missing/total_columns>0.3 & missing/total_columns<=0.4)){
list[5]=list[1]+1
}
if((missing/total_columns>0.4 & missing/total_columns<=0.5)){
list[6]=list[1]+1
}
if((missing/total_columns>0.5 & missing/total_columns<=0.6)){
list[7]=list[1]+1
}
if((missing/total_columns>0.6 & missing/total_columns<=0.7)){
list[8]=list[1]+1
}
if((missing/total_columns>0.7 & missing/total_columns<=0.8)){
list[9]=list[1]+1
}
if((missing/total_columns>0.8 & missing/total_columns<=0.9)){
list[10]=list[1]+1
}
if((missing/total_columns>0.9 & missing/total_columns<1)){
list[11]=list[1]+1
}
if((missing/total_columns==1)){
list[12]=list[1]+1
}
}
for (i in 1:length(list)) {
tbl[i, 2] <- list[i]
}
for (i in 1:length(list)) {
tbl[i, 3] <- paste0(round(list[i]/total_rows * 100,round), "%")
}
cat("\n=================\n","Total Rows:", nrow(df), sep = "")
cat("\nMissing Rows:", sum(rowSums(is.na(df))!=0), sep = "")
cat("\nPercentage of Missing Rows:", paste0(round((sum(rowSums(is.na(df))!=0)/nrow(df))*100,round),"%"),"\n\n",sep = "")
prmatrix(tbl, quote = FALSE, rowlab = rep("", nrow(tbl)),
right = TRUE)
}
colNA(df)
rowNA(df)
}
summaryNA(emptyCars)
class(summaryNA(emptyCars))
data(mtcars)
fixNA
library(seeNA)
library(devtools)
build_site()
In addition to the first three functions covered in the introduction, the function discussed in this part of the vignette will be the summaryNA function. This function
library(seeNA)
build_site()
